[
  {
    "key": "ecocode-linter/no-multiple-access-dom-element",
    "type": "CODE_SMELL",
    "name": "Disallow multiple access of same DOM element",
    "description": "\n\n<h2 id=\"rule-details\">Rule details</h2>\n<p>This rule aims to reduce DOM access assigning its object to variable when access multiple time. It saves CPU cycles.</p>\n<h2 id=\"examples\">Examples</h2>\n<p>Examples of <strong>incorrect</strong> code for this rule:</p>\n<pre><code class=\"language-js\">var el1 = document.getElementById(&quot;block1&quot;).test1;\nvar el2 = document.getElementById(&quot;block1&quot;).test2;\n</code></pre>\n<p>Examples of <strong>correct</strong> code for this rule:</p>\n<pre><code class=\"language-js\">var blockElement = document.getElementById(&quot;block1&quot;);\nvar el1 = blockElement.test1;\nvar el2 = blockElement.test2;\n</code></pre>\n<br/><a href=\"https://github.com/green-code-initiative/ecoCode-linter/blob/main/eslint-plugin/docs/rules/no-multiple-access-dom-element.md\">Click here to access the rule details.</a>",
    "constantDebtMinutes": 5,
    "severity": "MINOR",
    "tags": [
      "eco-design",
      "ecocode"
    ]
  },
  {
    "key": "ecocode-linter/no-postfix-increment",
    "type": "CODE_SMELL",
    "name": "Disallow the use of the postfix increment.",
    "description": "The i++ form has the disadvantage of generating a tem-porary variable during incrementation, which is not the case with the ++i form.",
    "constantDebtMinutes": 5,
    "severity": "MINOR",
    "tags": [
      "eco-design",
      "ecocode"
    ]
  },
  {
    "key": "ecocode-linter/no-funccall-in-loop",
    "type": "CODE_SMELL",
    "name": "Calling a function in the declaration of a for loop",
    "description": "Avoid calling the function each time the loop is iterated.",
    "constantDebtMinutes": 5,
    "severity": "MINOR",
    "tags": [
      "eco-design",
      "ecocode"
    ]
  }
]
